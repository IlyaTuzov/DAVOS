<!-- 
    Dictionary of fault models for Xilinx simprim macrocell library
    Author: Ilya Tuzov, Universitat Politecnica de Valencia
-->


<data>

	<observation_spec>

        
		<macrocell name = "FDRE"  >
			<port name = "Q" />
		</macrocell>
        
		<macrocell name = "FDCE"  >
			<port name = "Q" />
		</macrocell>
        
        
		<macrocell name = "FDPE"  >
			<port name = "Q" />
		</macrocell>


		<macrocell name = "FDSE"  >
			<port name = "Q" />
		</macrocell>

        
		<macrocell name = "RAMD32"  >
			<port name = "mem" />
		</macrocell>
        
		<macrocell name = "RAMS32"  >
			<port name = "mem" />
		</macrocell>
        
		
		<macrocell name = "SIGNAL"  >
			
		</macrocell>   
        
	</observation_spec>
	
	

	<register_reconstruction>

        <macrocell name = "FDRE" outport = "Q"/>	
        <macrocell name = "FDCE" outport = "Q"/>	
        <macrocell name = "FDPE" outport = "Q"/>	
        <macrocell name = "FDSE" outport = "Q"/>	

		
		<macrocell name = "SIGNAL" outport = ""/>	
        
	</register_reconstruction>

	
	
<fdesc 	model = "BitFlip" 
		macrocells = "RAMD32, RAMS32" >
		
	<injection_rule
		code_pattern = "
			set cv [examine {#PATH/#NODE_1}]#; 
			if {$cv == 1} { set nv 0 } else { set nv 1 }#;
			force -deposit {#PATH/#NODE_1} $nv 0#;">
			
		<injectioncase 
			label = "mem" 
			dimensions = "0-32" 
			nodes = "#NODE_1=mem#DIM">			
		</injectioncase>	  
	</injection_rule>
</fdesc>



	
<fdesc 	model = "StuckAt" 
		macrocells = "SIGNAL" >
	<injection_rule
		code_pattern = "force -freeze #PATH #FORCEDVALUE 0" >

        <injectioncase label = "" nodes = "" />        
	</injection_rule>
</fdesc>	


<fdesc 	model = "BitFlip" 
		macrocells = "SIGNAL" >
	<injection_rule
		code_pattern = "
			set cv [examine #PATH]#;
			if {$cv == 1} { set nv 0 } else { set nv 1 }#;
			force -deposit #PATH $nv 0#;" >
        
        <injectioncase label = "" nodes = "" />
	</injection_rule>
</fdesc>	   
	   

<fdesc 	model = "pulse" 
		macrocells = "SIGNAL" >
	<injection_rule
		code_pattern = "
			set cv [examine #PATH]#; 
			if {$cv == 1} { set nv 0 } else { set nv 1 }#;
			force -freeze #PATH $nv 0 -cancel #DURATION#;" >

            <injectioncase label = "" nodes = "" />            
	</injection_rule>
</fdesc>		


	
<fdesc 	model = "BitFlip" 
		macrocells = "FDRE, FDCE, FDPE, FDSE" >
	<injection_rule
		code_pattern = "
			set cv [examine {#PATH/#NODE_1}]#; 
			if {$cv == 1} { set nv 0 } else { set nv 1 }#;
            force -deposit {#PATH/#NODE_1} $nv 0#;" >
			
		<injectioncase label = "Q" nodes = "#NODE_1=Q_out"/>
	</injection_rule>
</fdesc>



<fdesc 	model = "BitFlip" 
		macrocells = "ramb18e1" 
		configuration = "RAM_MODE:TDP" >
	<injection_rule
		code_pattern = "
			set cv [examine {#PATH/#NODE_1}]#; 
			if {$cv == 1} { set nv 0 } else { set nv 1 }#;
			change {#PATH/#NODE_1} $nv 0#;">
			
		<injectioncase label = "TDP/RAMB18E1_TDP_inst/prcs_clk/mem" 
			  dimensions = "0-1023, 0-15" 
			  nodes = "#NODE_1=TDP/RAMB18E1_TDP_inst/prcs_clk/mem#DIM"/>
	</injection_rule>
</fdesc>   






<fdesc 	model = "BitFlipCMEM" 
		macrocells = "LUT6" >

	<instrumentation_rule>
		<redefine_node  name = "INIT_reg"  modifier_to = "signal" 	basetype_to = ""	inline_to = "" />
		<extend_sensitivity_list	process_name = "X_LUT6P"	nodes = "INIT_reg"	 />
	</instrumentation_rule>
		
		
	<injection_rule
		code_pattern = "
			set cv [examine #PATH/#NODE_1]#; 
			if {$cv == 1} { set nv 0 } else { set nv 1 }#;
			change #PATH/#NODE_1 $nv 0#;">
			
		<injectioncase 
			label = "INIT_reg" 
			dimensions = "0-63" 
			nodes = "#NODE_1=INIT_reg#DIM">			
		</injectioncase>	  
	</injection_rule>
</fdesc>





<fdesc 	model = "BitFlipCMEM" 
		macrocells = "LUT5" >

	<instrumentation_rule>
		<redefine_node  name = "INIT_reg"  modifier_to = "signal" 	basetype_to = ""	inline_to = "" />
		<extend_sensitivity_list	process_name = "X_LUT6P"	nodes = "INIT_reg"	 />
	</instrumentation_rule>
		
		
	<injection_rule
		code_pattern = "
			set cv [examine #PATH/#NODE_1]#; 
			if {$cv == 1} { set nv 0 } else { set nv 1 }#;
			change #PATH/#NODE_1 $nv 0#;">
			
		<injectioncase 
			label = "INIT_reg" 
			dimensions = "0-31" 
			nodes = "#NODE_1=INIT_reg#DIM">			
		</injectioncase>	  
	</injection_rule>
</fdesc>




<fdesc 	model = "BitFlipCMEM" 
		macrocells = "LUT4" >

	<instrumentation_rule>
		<redefine_node  name = "INIT_reg"  modifier_to = "signal" 	basetype_to = ""	inline_to = "" />
		<extend_sensitivity_list	process_name = "X_LUT6P"	nodes = "INIT_reg"	 />
	</instrumentation_rule>
		
		
	<injection_rule
		code_pattern = "
			set cv [examine #PATH/#NODE_1]#; 
			if {$cv == 1} { set nv 0 } else { set nv 1 }#;
			change #PATH/#NODE_1 $nv 0#;">
			
		<injectioncase 
			label = "INIT_reg" 
			dimensions = "0-15" 
			nodes = "#NODE_1=INIT_reg#DIM">			
		</injectioncase>	  
	</injection_rule>
</fdesc>






<fdesc 	model = "BitFlipCMEM" 
		macrocells = "LUT3" >

	<instrumentation_rule>
		<redefine_node  name = "INIT_reg"  modifier_to = "signal" 	basetype_to = ""	inline_to = "" />
		<extend_sensitivity_list	process_name = "X_LUT6P"	nodes = "INIT_reg"	 />
	</instrumentation_rule>
		
		
	<injection_rule
		code_pattern = "
			set cv [examine #PATH/#NODE_1]#; 
			if {$cv == 1} { set nv 0 } else { set nv 1 }#;
			change #PATH/#NODE_1 $nv 0#;">
			
		<injectioncase 
			label = "INIT_reg" 
			dimensions = "0-7" 
			nodes = "#NODE_1=INIT_reg#DIM">			
		</injectioncase>	  
	</injection_rule>
</fdesc>



<fdesc 	model = "BitFlipCMEM" 
		macrocells = "LUT2" >

	<instrumentation_rule>
		<redefine_node  name = "INIT_reg"  modifier_to = "signal" 	basetype_to = ""	inline_to = "" />
		<extend_sensitivity_list	process_name = "X_LUT6P"	nodes = "INIT_reg"	 />
	</instrumentation_rule>
		
		
	<injection_rule
		code_pattern = "
			set cv [examine #PATH/#NODE_1]#; 
			if {$cv == 1} { set nv 0 } else { set nv 1 }#;
			change #PATH/#NODE_1 $nv 0#;">
			
		<injectioncase 
			label = "INIT_reg" 
			dimensions = "0-3" 
			nodes = "#NODE_1=INIT_reg#DIM">			
		</injectioncase>	  
	</injection_rule>
</fdesc>





<profiling_rule macrocells = "X_LUT6"
                case = "INIT_reg"
                NodeBuilder = "{#PATH/INIT_reg#INDEX_1}">
    <index label = "#INDEX_1" dimension = "0-63"/>
    <Actime index = "#INDEX_1" expression = "{ ((concat_range (5 downto 0))(I5 &amp; I4 &amp; I3 &amp; I2 &amp; I1 &amp; I0))}"/>
</profiling_rule>





</data>